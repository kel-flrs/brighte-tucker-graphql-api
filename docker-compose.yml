services:
  postgres:
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}"
      PORT: "3000"
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app:cached
      - /app/node_modules
    networks:
      - app-network
    command: >
      sh -c "npm run prisma:deploy &&
             npm run prisma:generate &&
             npm run prisma:seed &&
             npm run start:dev"
    restart: unless-stopped

  prisma-studio:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - .:/app:cached
    ports:
      - "5555:5555"
    depends_on:
      - postgres
    networks:
      - app-network
    command: npx prisma studio --schema=./prisma/schema.prisma
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}"
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "8080:80"
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - pgadmin-data:/var/lib/pgadmin

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:
